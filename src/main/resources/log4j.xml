<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

   <!-- Appenders -->
   <!-- 
      전달된 로그를 어디에 출력할지 결정
      ConsoleAppender      로그를 콘솔에 출력하기 위한 Appender
      JDBCAppender      로그를 DB에 출력하기 위한 Appender
      FileAppender      로그를 파일에 출력하기 위한 Appender
                     지정 파일에 로그가 계속 남아 크기가 지나치게 커지고 지속적인 로그 관리가 불가능하다는 단점
      RollingFileAppender   FileAppender를 보완한 개념
                     일정 조건 후 기존 파일을 백업 파일로 바꾸고 다시 처음부터 시작   (ex. DailyRollingFileAppender)

      layout : 로그를 어떤 형식으로 출력할지 결정
         DateLayout   HTMLLayout   PatternLayout(디버깅에 가장 적합)   SimpleLayout   XMLLayout 
            %p      : debug, info, warn, error, fatal등의 priority
            %m      : 로그 내용 출력
            %d      : 로깅 이벤트가 발생한 시간 출력(프로그램 속도를 느리게 할 수 있다)
                      포맷을 %d{HH:mm:ss, SSS}와 같은 형태로 사용하여 SimpleDateFormat에 따른 포맷팅을 하면 된다
            %t      : 로깅 이벤트가 발생된 스레드 이름 출력
            %%      : % 출력
            %n      : 개행문자 출력
            %c      : package(카테고리) 출력
            %c{n}   : n(숫자)만큼의 package를 하단부터 역으로 출력
            %C      : 호출자의 클래스 명 출력
            %F      : 로깅이 발생한 프로그램 파일 명 출력
            %l      : 로깅이 발생한 caller의 정보 출력
            %L      : 로깅이 발생한 caller의 라인 수 출력
            %M      : 로깅이 발생한 method이름 출력
            %r      : 애플리케이션 시작 이후부터 로깅이 발생한 시점의 시간(밀리세컨) 출력                           
    -->
   <appender name="console" class="org.apache.log4j.ConsoleAppender">
      <param name="Target" value="System.out" />
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%-5p: %c - %m%n" />
      </layout>
   </appender>
   
   <appender name="console2" class="org.apache.log4j.ConsoleAppender">
      <param name="Target" value="System.out" />
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%-5p: %c{1}.%M{%L} - %m%n" />
      </layout>
   </appender>
   
   <!-- 출력대상이 file이므로 appender 추가 / 매일 업데이트 되게 할 거라서 그냥 File이 아닌 RollingFile 사용 -->
   <appender name="myDailyFile" class="org.apache.log4j.DailyRollingFileAppender">
      <param name="File" value="/logs/member/login.log"/> <!-- 로그인 이력을 log파일로 만들려고 하는 거임 파일위치,이름지정 -->
      <param name="Append" value="true" /> <!-- true는 이어쓰기 .. io할 때의 append 느낌 -->
      <param name="encoding" value="UTF-8"/>
      <param name="DatePattern" value="'.'yyyyMMdd"/><!-- 오늘한걸 백업하면 오늘 날짜가 저 형식으로 나오게 ..20220615 -->
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss} [%p] %c{1}.%M{%L} - %m%n"/>
      </layout>
   </appender>
   
   <appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%-5p: %m%n"/>
      </layout>
   </appender>
   
   <!-- Application Loggers -->
   <!-- 
      등록된 로그들을 받아주는 역할
      DEBUG < INFO < WARN < ERROR <FATAL
      설정한 level 이상만 출력
         ex. level info, debug는 출력 x
         
         fatal   아주 심각한 에러 발생
         error   어떤 요청 처리 중 문제 발생
         warn   프로그램 실행에는 문제 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지
         info   상태 변경과 같은 정보성 메세지
         debug   개발 시 디버그 용도로 사용하는 메세지
         trace    디버그가 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 나타냄 
    -->
   <logger name="com.kh.spring">
      <level value="info"/>
   </logger>
   
   <!-- 3rdparty Loggers -->
   <logger name="org.springframework.core">
      <level value="info" />
   </logger>
   
   <logger name="org.springframework.beans">
      <level value="info" />
   </logger>
   
   <logger name="org.springframework.context">
      <level value="info" />
   </logger>

   <logger name="org.springframework.web">
      <level value="info" />
   </logger>
   
   <logger name="com.kh.spring.log.Log4jTest" additivity="false">
      <level value="debug" />
      <appender-ref ref="console" /> <!-- console참조하므로 위에 consoleAppender 로 올라가서 찍힘 .. 그리고 모든 logger는 루트로 내려감  -->
   </logger>
   
   <logger name="com.kh.spring.member.controller.MemberController" additivity="false">
      <level value="debug"/>
      <appender-ref ref="console2"/>
<!--       <appender-ref ref="myDailyFile"/> -->
   </logger>

     <logger name="com.kh.spring.common.interceptor.TestInterceptor" additivity="false">
      <level value="debug" />
      <appender-ref ref="console2" />
      </logger>
      
      <logger name="com.kh.spring.common.interceptor.LoginInterceptor">
         <level value="info"/>
         <appender-ref ref="myDailyFile"/>
      </logger>
      
      <!-- sql 보여주는 것 -->
      <logger name="jdbc.sqlonly" additivity="false">
         <level value="info"/>
         <appender-ref ref="sqlLogger"/>
      </logger>
      
      <!-- resultSet 보여주는 것 -->
      <logger name="jdbc.resultsettable" additivity="false">
         <level value="info"/>
         <appender-ref ref="sqlLogger"/>
      </logger>
      
      
      <!-- aop -->
      <logger name="com.kh.spring.common.aop">
         <level value="debug"/>
      </logger>
   <!-- Root Logger -->
   <!-- 
      모든 자식 logger들의 로깅 출력이 root logger를 통해 일어남
    -->
   <root>
      <priority value="warn" />
      <appender-ref ref="console" />
   </root>
</log4j:configuration>